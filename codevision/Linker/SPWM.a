;//-----------------------------------------------------------------------------
;// Copyright:      	www.KnowledgePlus.ir
;// Author:         	OZHAN KD
;// Remarks:        	code ported to GNUC by Sh. Nourbakhsh Rad
;// known Problems: 	none
;// Version:        	1.5.2
;// Description:
;//									MCU: ATmega64 @8MHz external xtal
;//
;//									3 phase SPWM outputs on OCR1A,OCR1B,OCR1C
;//									Carrier frequency = 15.6 KHz
;//									Sine frequency range = 0.5-100Hz with 0.1Hz step
;//									PWM resolution = 8bit
;//
;//									Frequency varies by applied voltage to ADC0(PF0)
;//									ADC Vref = AVcc
;//									ADC result<14 ---> output off
;//									ADC result: 14-1009 ---> f: 0.5 Hz - 100 Hz
;//									ADC result>1009 ---> f=100 Hz
;//
;//-----------------------------------------------------------------------------
;// History:
;//									V1.0 Mar 2011
;//										Start Project....
;//
;//									V1.1 Feb 2011
;//										Linear V/F curve added
;//
;//									V1.2 Jun 2011
;//										Acceleration-Deceleration added
;//
;//									V1.3 Jul 2011
;//										Adjustable Acceleration-Deceleration
;//										by ADC1 and ADC2 analog inputs
;//										ADC1 sets acceleration (1s-255s)
;//										ADC2 sets decceleration (1s-255s)
;//										Adjusted values are times for 100Hz change in frequency
;//
;//									V1.4 Jul 2012
;//										Fixed some bugs
;//
;//									V1.5 Oct 4, 2012
;//										Timer3 mode changed to Fast PWM (due to problems in frequency change)
;//										modification in amplitude calculation
;//
;//-----------------------------------------------------------------------------
;
;#include "SPWM.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include "SINE_tbl.h"
;#include "TIMER_tbl.h"
;
;
;//******************* Constants
;volatile unsigned int 										FinalSpeed		= 0;
;volatile unsigned char 										Acceleration	= 1;

	.DSEG
;volatile unsigned char 										Deceleration	= 1;
;
;volatile unsigned int 										speed					= 0;
;volatile unsigned char 										index					= 0;
;
;volatile unsigned char 										MSflag				= 0;
;
;volatile unsigned int 										TCounter 			= 0;
;
;
;//*************************************************
;//******************* Functions *******************
;//*************************************************
;unsigned char A_calc(unsigned char sine, unsigned char Ain)
; 0004 0047 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0004 0048 	unsigned int 						sine_temp;
; 0004 0049 	unsigned char 					sine1;
; 0004 004A 
; 0004 004B 	sine1 = (sine<128)? ~sine : sine;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	sine -> Y+5
;	Ain -> Y+4
;	sine_temp -> R16,R17
;	sine1 -> R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0004 004C 
; 0004 004D 	sine_temp   = ((unsigned int)sine1) <<1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0004 004E 	sine_temp  -= 255;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0004 004F 	sine_temp  *= Ain;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0004 0050 	sine_temp >>= 8;
;PCODE: $00000027 VOL: 0
; 0004 0051 	sine_temp  += 255;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0004 0052 	sine_temp >>= 1;
;PCODE: $0000002A VOL: 0
; 0004 0053 	sine_temp  += 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0004 0054 
; 0004 0055 	sine1 = (unsigned char)sine_temp;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0004 0056 
; 0004 0057 	return((sine<128)? ~sine1 : sine1);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0004 0058 }	//A_calc
;PCODE: $0000003C VOL: 0
;
;//-----------------------------------------------------------------------------
;ISR_PWM_SET()
; 0004 005C {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0004 005D 	unsigned long 				A;
; 0004 005E 
; 0004 005F 	if 			(speed>795)				index += 16;
;PCODE: $0000003F VOL: 0
;	A -> Y+0
;PCODE: $00000040 VOL: 1
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 1
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 1
; 0004 0060 	else if	(speed>595)				index += 8;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 1
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 1
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 1
; 0004 0061 	else if	(speed>395)				index += 4;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 1
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 1
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 1
; 0004 0062 	else if	(speed>195)				index += 2;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 1
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 1
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 1
; 0004 0063 	else 											index += 1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 1
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 1
; 0004 0064 
; 0004 0065 	//-------------------
; 0004 0066 	if(speed>=f_Base)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 1
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0004 0067 	{
; 0004 0068 		PWMR_SET(pgm_read_byte(&sine[R_Index(index)]));
;PCODE: $0000006A VOL: 1
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0004 0069 		PWMS_SET(pgm_read_byte(&sine[S_Index(index)]));
;PCODE: $00000073 VOL: 1
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0004 006A 		PWMT_SET(pgm_read_byte(&sine[T_Index(index)]));
;PCODE: $0000007C VOL: 1
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0004 006B 	}
; 0004 006C 
; 0004 006D 	//-----
; 0004 006E 	else if (speed<=f_Boost)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 1
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0004 006F 	{
; 0004 0070 		PWMR_SET(A_calc(pgm_read_byte(&sine[R_Index(index)]), A_Boost));
;PCODE: $0000008B VOL: 1
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0004 0071 		PWMS_SET(A_calc(pgm_read_byte(&sine[S_Index(index)]), A_Boost));
;PCODE: $00000097 VOL: 1
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0004 0072 		PWMT_SET(A_calc(pgm_read_byte(&sine[T_Index(index)]), A_Boost));
;PCODE: $000000A3 VOL: 1
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0004 0073 	}
; 0004 0074 
; 0004 0075 	//-----
; 0004 0076 	else
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0004 0077 	{
; 0004 0078 		A = ((N *(unsigned long)(speed -f_Boost)) /M) +A_Boost;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 1
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0004 0079 
; 0004 007A 		PWMR_SET(A_calc(pgm_read_byte(&sine[R_Index(index)]), (unsigned char)A));
;PCODE: $000000BC VOL: 1
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0004 007B 		PWMS_SET(A_calc(pgm_read_byte(&sine[S_Index(index)]), (unsigned char)A));
;PCODE: $000000C8 VOL: 1
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0004 007C 		PWMT_SET(A_calc(pgm_read_byte(&sine[T_Index(index)]), (unsigned char)A));
;PCODE: $000000D4 VOL: 1
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0004 007D 	}
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0004 007E }	//ISR_PWM_SET
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;ISR_SPEED_TUNE()								//Occur every 1ms!
; 0004 0081 {
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0004 0082 	#if (ACC_DEC_USE ==0)
; 0004 0083 		speed = FinalSpeed;
; 0004 0084 
; 0004 0085 	#else
; 0004 0086 		static unsigned char 					ACC_counter = 0;
; 0004 0087 		static unsigned char 					DEC_counter = 0;
; 0004 0088 
; 0004 0089 
; 0004 008A 		//-----  Acceleration
; 0004 008B 		if(speed<FinalSpeed)
;PCODE: $000000E9 VOL: 1
;PCODE: $000000EA VOL: 1
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0004 008C 		{
; 0004 008D 			DEC_counter = 0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0004 008E 
; 0004 008F 			#if (ACC_DEC_USE ==1) || (ACC_DEC_USE ==3)
; 0004 0090 				ACC_counter++;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0004 0091 		 		if(ACC_counter>=Acceleration)
;PCODE: $000000F2 VOL: 1
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0004 0092 		 		{
; 0004 0093 		 			ACC_counter = 0;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0004 0094 		  		speed++;
;PCODE: $000000F8 VOL: 1
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0004 0095 				}
; 0004 0096 
; 0004 0097 			#else
; 0004 0098 				speed = FinalSpeed;
; 0004 0099 
; 0004 009A 			#endif
; 0004 009B 		}
;PCODE: $000000FC VOL: 0
; 0004 009C 
; 0004 009D 		//-----  Deceleration
; 0004 009E 		else if(speed>FinalSpeed)
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 1
;PCODE: $00000100 VOL: 1
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0004 009F 		{
; 0004 00A0 			ACC_counter = 0;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0004 00A1 
; 0004 00A2 			#if (ACC_DEC_USE ==2) || (ACC_DEC_USE ==3)
; 0004 00A3 				DEC_counter++;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0004 00A4 				if(DEC_counter>=Deceleration)
;PCODE: $00000108 VOL: 1
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0004 00A5 				{
; 0004 00A6 			  	DEC_counter = 0;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0004 00A7 			  	speed--;
;PCODE: $0000010E VOL: 1
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0004 00A8 				}
; 0004 00A9 
; 0004 00AA 			#else
; 0004 00AB 				speed = FinalSpeed;
; 0004 00AC 
; 0004 00AD 			#endif
; 0004 00AE 		}
;PCODE: $00000112 VOL: 0
; 0004 00AF 
; 0004 00B0 		//-----
; 0004 00B1 		else
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0004 00B2 		{
; 0004 00B3 	 		ACC_counter = 0;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0004 00B4 	  	DEC_counter = 0;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0004 00B5 		}
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0004 00B6 
; 0004 00B7 	#endif
; 0004 00B8 
; 0004 00B9 	//-------------------
; 0004 00BA 	if(speed)
;PCODE: $0000011B VOL: 1
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0004 00BB 	{
; 0004 00BC 		FRQ_SET(pgm_read_word(&Timer_Value[speed])-1);
;PCODE: $0000011E VOL: 1
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0004 00BD 
; 0004 00BE  		if(MSflag==0)
;PCODE: $00000125 VOL: 1
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0004 00BF  		{
; 0004 00C0 			PWMRST_ON();
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0004 00C1 			MSflag = 1;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 1
; 0004 00C2 
; 0004 00C3 			PWM_INTV_TMR_ON();
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0004 00C4 			PWM_INTV_ena();
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0004 00C5 		}
; 0004 00C6 	}
;PCODE: $0000013D VOL: 0
; 0004 00C7 
; 0004 00C8 	//-----
; 0004 00C9 	else
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0004 00CA 	{
; 0004 00CB 	 	PWMRST_OFF();
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0004 00CC 		MSflag = 0;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 1
; 0004 00CD 
; 0004 00CE 	 	PWM_INTV_TMR_OFF();
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0004 00CF 	 	PWM_INTV_dis();
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0004 00D0 	}
;PCODE: $00000152 VOL: 0
; 0004 00D1 
; 0004 00D2 	TCounter++;
;PCODE: $00000153 VOL: 1
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0004 00D3 }	//ISR_SPEED_TUNE
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;
;//-----------------------------------------------------------------------------
;//-----------------------------------------------------------------------------
;void SPWM_init(void)
; 0004 00D8 {
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0004 00D9 	SPWM_HW_init();
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0004 00DA 
; 0004 00DB 	PWMR_SET(R_Index(index));
;PCODE: $0000016B VOL: 1
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0004 00DC  	PWMS_SET(S_Index(index));
;PCODE: $00000171 VOL: 1
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0004 00DD  	PWMT_SET(T_Index(index));
;PCODE: $00000177 VOL: 1
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0004 00DE 
; 0004 00DF 	PWM_TMR_init();
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0004 00E0 	PWM_TMR_ON();
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0004 00E1 
; 0004 00E2 	PWM_INTV_init();
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0004 00E3 	SPEED_INTV_SET(SPEED_INTV_time);		//Occur every 1ms!
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0004 00E4 
; 0004 00E5 	SPEED_INTV_init();
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0004 00E6 	SPEED_INTV_ena();
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0004 00E7 }	//SPWM_init
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;
;unsigned int SetFrequency(unsigned int FRQ)
; 0004 00EA {
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0004 00EB 	if			(FRQ<14)					FinalSpeed = 0;
;PCODE: $00000196 VOL: 0
;	FRQ -> Y+0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 1
; 0004 00EC 	else if (FRQ<1010)				FinalSpeed = FRQ -13;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 1
; 0004 00ED 	else 											FinalSpeed = 996;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 1
; 0004 00EE 
; 0004 00EF 	return(FinalSpeed +4);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 1
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0004 00F0 }	//SetFrequency
;PCODE: $000001AE VOL: 0
;
;unsigned char SetAcceleration(unsigned char ACC)
; 0004 00F3 {
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0004 00F4 	if(ACC) 									Acceleration = ACC;
;PCODE: $000001B1 VOL: 0
;	ACC -> Y+0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 1
; 0004 00F5 	else 											Acceleration = 1;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 1
; 0004 00F6 
; 0004 00F7 	return(Acceleration);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 1
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0004 00F8 }	//SetAcceleration
;PCODE: $000001BF VOL: 0
;
;unsigned char SetDeceleration(unsigned char DEC)
; 0004 00FB {
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0004 00FC 	if(DEC) 									Deceleration = DEC;
;PCODE: $000001C2 VOL: 0
;	DEC -> Y+0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 1
; 0004 00FD 	else 											Deceleration = 1;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 1
; 0004 00FE 
; 0004 00FF 	return(Deceleration);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 1
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0004 0100 }	//SetDeceleration
;PCODE: $000001D0 VOL: 0
